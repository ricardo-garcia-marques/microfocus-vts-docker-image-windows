var fs=require("fs"),util=require("util"),levels={info:1,warning:2,error:3};function expandPath(a){return a.replace(/(%[^%]+%)/g,function(a){var a=a.replace(/%/g,"").toUpperCase(),b;for(b in process.env)if(b.toUpperCase()===a)return process.env[b];return a})}function pad(a,c){a=String(a);for(c=c||2;a.length<c;)a="0"+a;return a}function Transport(a){this.level=a.level||"info"}
function File(a){this.type="File";Transport.call(this,a);var c=new Date,c=c.getFullYear()+"_"+pad(c.getMonth()+1)+"_"+pad(c.getDate())+"_"+c.getHours()+"_"+pad(c.getMinutes())+"_"+pad(c.getSeconds())+".log",b=expandPath(a.path);fs.existsSync(b)?fs.statSync(b).isDirectory()||(fs.unlinkSync(b),fs.mkdirSync(b)):fs.mkdirSync(b);a.name&&(b+="/"+a.name,fs.existsSync(b)||fs.mkdirSync(b));this.logFolder=b;this._stream=fs.createWriteStream(b+"/"+c,{flags:"a"})}util.inherits(File,Transport);
File.prototype.log=function(a,c,b){this._stream.write(JSON.stringify({level:a,timestamp:c,message:b})+"\n")};function Console(a){Transport.call(this,a);this.type="Console"}util.inherits(Console,Transport);
Console.prototype.log=function(a,c,b){sendToParent({status:a,msg:b});switch(a){case "info":console.info(a+":"+b);break;case "warning":console.warn("\u001b[1m\u001b[33m"+a+":"+b+"\u001b[39m\u001b[22m");break;case "error":console.error("\u001b[1m\u001b[31m"+a+":"+b+"\u001b[39m\u001b[22m");break;default:console.log(a+":"+b)}};
var Logger=function(a){a.levels=a.levels||levels;this.setLevels(a.levels||levels,a.level||"info");var c=[],b;for(b in a.transports){b=a.transports[b];b.name=a.name;var d=getTransportClasses(b.type);d&&(b=new d(b),b.levelValue=_getLevel(this,b.level),c.push(b))}this.transports=c};Logger.prototype.getLogPath=function(){var a=null;for(i in logger.transports)if(transport=this.transports[i],"File"===transport.type){a=transport.logFolder;break}return a};
function _transportLog(a,c,b,d,f){for(var g=a.transports.length,e=0;e<g;++e)b>=a.transports[e].levelValue&&a.transports[e].log(c,d,f)}function _internalLog(a,c,b,d){b>=a.levelValue&&_transportLog(a,c,b,new Date,util.format.apply(a,d))}function _getLevel(a,c){if("string"===typeof c&&void 0!==a.levels[c])return a.levels[c];throw Error("invalid level:"+c);}
function _setLevels(a,c,b){a.levels&&Object.keys(a.levels).forEach(function(b){delete a[b]});a.levels=c;a.level=b;a.levelValue=_getLevel(a,a.level);Object.keys(a.levels).forEach(function(b){a[b]=function(){_internalLog(a,b,a.levels[b],arguments)}})}Logger.prototype.setLevels=function(a,c){_setLevels(this,a,c)};Logger.prototype.log=function(a){var c=_getLevel(this,a);c>=this.levelValue&&_transportLog(this,a,c,new Date,util.format.apply(this,Array.prototype.slice.call(arguments,1)))};
var sendToParent=Logger.prototype.sendToParent=function(){var a=!process.send;return function(c){try{a||process.send(c)}catch(b){console.log("channel closed"),a=!0}}}(),transportClasses={},installTransportClass=function(a,c){transportClasses[a]=c};function getTransportClasses(a){return transportClasses[a]}installTransportClass("Console",Console);installTransportClass("File",File);Logger.initDefaultInstance=function(a){return Logger.instance=new Logger(a)};
Logger.getDefaultInstance=function(){if(null!=Logger.instance)return Logger.instance;var a=new Logger({level:"info",transports:{file:{type:"File",path:"win32"===process.platform?"%TEMP%/VTS":"/tmp/VTS"},console:{type:"Console"}}});return Logger.instance=a};exports.levels=levels;exports.expandPath=expandPath;exports.installTransportClass=installTransportClass;exports.Logger=Logger;
