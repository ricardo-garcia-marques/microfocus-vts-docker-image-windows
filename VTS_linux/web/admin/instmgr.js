var path=require("path"),fs=require("fs"),cp=require("child_process"),log=require("../log"),common=require("./common"),enumMode=common.enumMode,changeMonitor=require("./notifier").changeMonitor,TIMEOUT=6E4,apiServer="./daemon";function Instance(a,b){"object"===typeof a?(this.port=a.port,this.name=a.name):(this.port=a,this.name=b);this.status="unknown";this.proc=null}
Instance.prototype.launch=function(a){var b=["-port",this.port];this.name&&(b.push("-name"),b.push(this.name));logger.info("starting node instance with parameters",b);var c=!1;this.status="starting";var d=this;this.proc=b=cp.execFile(apiServer,[d.port,d.name],function(b){b?a&&!c&&(c=!0,a("failed to start instance")):d.status="started"});logger.info("launched child process, pid = "+b.pid);-1!=b.id&&(a&&!c)&&(c=!0,a(null))};Instance.prototype.status=function(){return this.status};
Instance.prototype.serialize=function(a){return!0===a?{port:this.port,name:this.name}:{port:this.port,name:this.name,status:this.status}};Instance.prototype.stop=function(){var a=this.proc;"stopped"===this.status;a&&(a.kill(),logger.info("process "+a.pid+" is killed"))};Instance.prototype.enableApiAccess=function(a,b){data.enableApiAccess(a);b&&b()};Instance.prototype.send=function(a){this.proc&&this.proc.send(a)};
function ChildInstance(a){this.proc=a;var b=this;a.on("message",function(a){if(a&&a.type)switch(a.type){case "enableAccess":b.enableFunc?b.enableFunc(a.value):logger.error("enableFunc is not initialized"),changeMonitor.notifyConfig({started:a.value})}})}ChildInstance.prototype.enableAccess=function(a){this.enableFunc=a};InstanceManager.initInstance=function(a,b){return InstanceManager.Instance=new InstanceManager(a,b)};
function InstanceManager(a,b){logger.info("initialize InstanceManger with options",a);this.mode=a.mode;this.mode!==enumMode.Commander&&(this.port=a.port,this.name=a.name);this.apiAccessEnabled=!0;this.configPath=path.join(configure.dbPath,"instances.json");this.instances=this.readInstances();if(this.isDefaultInstance()){this.launchInstances(this.instances,b);var c=this;process.on("exit",function(){for(i in c.instances)c.instances[i].stop();process.exit(0)})}else b&&b(this)}
InstanceManager.prototype.readInstances=function(a){var b="";if(fs.existsSync(this.configPath))try{b=fs.readFileSync(this.configPath,"utf8")}catch(c){logger.error(c)}return readInstances(a,b)};InstanceManager.prototype.writeInstances=function(){var a=this.instances,b=[];for(i in a)b.push(a[i].serialize(!0));a=JSON.stringify(b,null,4);fs.writeFileSync(this.configPath,a,"utf8")};InstanceManager.prototype.commitSuicide=function(){process.exit(code=0)};
InstanceManager.prototype.isInInstancesList=function(a){if(!a)return!0;a=a[this.port];return void 0==a?!1:a!==this.name?(logger.warning("an instance with same port but different name: port="+this.port+" name="+this.name),!1):!0};InstanceManager.prototype.isDefaultInstance=function(){return this.mode===enumMode.Default};InstanceManager.prototype.launchInstances=function(a,b){var c=Object.size(a);if(0==c)b&&b(this);else{var d=this;for(i in a)a[i].launch(function(){c--;0===c&&b&&b(d)})}};
InstanceManager.prototype.addNewInstance=function(a,b){var c=null,c=a instanceof Instance?a:new Instance(a),d=this.instances,g=c.name,e=c.port;for(i in d){if(e==d[i].port&&g==d[i].name){b({code:"INST_STARTED",message:"Instance already started"});return}if(e==d[i].port||g==d[i].name){b({code:"PORT_IN_USE",message:"Port or name is in use"});return}}if(0<configure.maxInstancesAllowed&&Object.size(this.instances)>=configure.maxInstancesAllowed)b("exceed max allowed instance");else{var f=this;c.launch(function(a){if(Util.empty(a))f.instances[e]=
c,f.writeInstances(),b&&b();else if(console.log("inst launching failed: "+a),b)b(a);else throw a;})}};InstanceManager.prototype.stopAllInstances=function(a){for(i in this.instances)this.instances[i].stop();this.instances={};this.writeInstances();a&&a(null)};
InstanceManager.prototype.stopInstance=function(a,b,c){var d=this.instances,g=!1;for(i in d)d[i].name===b&&(g=!0,d[i].stop());delete d[a];this.writeInstances();if(!1===g)if(errmsg="cannot find instance with port = {0}, name = {1}".format(a,b),c)c({code:"NOINSTANCE",message:errmsg});else throw error;else c&&c(null)};
InstanceManager.prototype.stopInstances=function(a,b){var c=[],d=this;0!==a.length&&function e(f){var h=a[f].name;d.stopInstance(a[f].port,h,function(a){a&&"NOINSTANCE"===a.code&&c.push(h);0>=f?0===c.length?b():b(c):e(f-1)})}(a.length-1)};InstanceManager.prototype.enableApiAccess=function(a,b){this.apiAccessEnabled=a;var c=this.instances;for(i in c)c[i].enableApiAccess(a);b&&b()};InstanceManager.prototype.listInstances=function(){var a=[],b=this.instances;for(i in b)a.push(b[i].serialize());return a};
InstanceManager.prototype.sendMessage=function(a){var b=this.instances;for(i in b)b[i].send(a)};
function readInstances(a,b){var c=[];try{Util.empty(b)||(c=eval("("+b+")"))}catch(d){}if(!0===a)return c;if(!(c instanceof Array))throw"invalid configure file, Array expected";var g={};for(i in c){var e=c[i],f=e.port,e=e.name||"";void 0!=g[f]&&logger.warning("instances with the same port {0} detected: ".format(f));var h=!0;for(pt in g)if(e==g[pt].name){h=!1;logger.warning('instances with duplicate name "{0}" detected'.format(e));break}h&&(g[f]=new Instance(f,e))}return g}exports.readInstances=readInstances;
exports.InstanceManager=InstanceManager;exports.ChildInstance=ChildInstance;
