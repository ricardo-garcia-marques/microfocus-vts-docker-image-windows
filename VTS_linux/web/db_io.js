var util=require("util"),http=require("http"),common=require("./admin/common");SECU_LOCAL_RUN=!0;var data=require("./admin/data"),Api=require("./api");
function getMock(){function a(){this.buf=[]}function b(a){this.level=a;a=["info","warn","error"];for(lvl in a)b.prototype[a[lvl]]=function(a){console.log(lvl+":"+a)};b.prototype.sendToParent=function(){console.log(arguments)}}function c(){}util.inherits(a,http.OutgoingMessage);a.prototype.output=function(){for(i in this.buf){var a=this.buf[i];"object"==typeof a&&(this.buf[i]=JSON.stringify(a))}return this.buf.join("\r\n")};a.prototype.rs={};c.prototype.getResponseMock=function(b){var c=new a;c.end=
function(a){this.buf.push(a);b&&b()};c.write=function(a){this.buf.push(a)};c.writeHead=function(a,b){this.buf.unshift("RETURN CODE: "+a);this.buf.unshift(JSON.stringify(b))};var d=common.Globalize.instance.getResource("en");c.rs=d;return c};c.prototype.Logger=function(){return new b};return new c}var mocks=getMock();logger=new mocks.Logger;var operation={connectdb:"test_connection",importdb:"import_database",exportdb:"export_database"};
function print_usage(){console.log('usage: node db_io.js {-import -connection "connection_string" -query "query_string" } | {-export -connection "connection_string" -table "table_name" [-drop_table] } [-inst "instance_name"]')}var options={collectionInfo:configure.colInfoTable,dbName:configure.defaultDbName,dbPath:configure.dbPath,query:{}},api={},adminHandler={},admin={};function setUp(a){api.open(function(){api.initialize(function(){a()})})}
function test_export_database(a,b){var c=mocks.getResponseMock(function(){console.log(c.output());b&&b()});data.set_local_run(!0);admin.export_database(c,api.system,a.query)}function test_import_database(a,b){var c=mocks.getResponseMock(function(){console.log(c.output());b&&b()});data.set_local_run(!0);admin.import_database(c,api.system,a.query)}
function test_connect_database(a,b){var c=mocks.getResponseMock(function(){console.log(c.output());b&&b()});data.set_local_run(!0);admin.test_connection(c,api.system,a.query)}
function parse_cmd(a){console.log("node args =",process.argv);-1!=process.argv.indexOf("-connection")&&(options.operation=operation.connectdb,options.query.conn=process.argv[process.argv.indexOf("-connection")+1]);-1!=process.argv.indexOf("-inst")&&(options.dbName=process.argv[process.argv.indexOf("-inst")+1]);-1!=process.argv.indexOf("-import")?(options.operation=operation.importdb,-1!=process.argv.indexOf("-query")&&(options.query.sql=process.argv[process.argv.indexOf("-query")+1])):-1!=process.argv.indexOf("-export")&&
(options.operation=operation.exportdb,options.query.droptbl=-1!=process.argv.indexOf("-drop_table")?"true":"false",-1!=process.argv.indexOf("-table")&&(options.query.tbl=process.argv[process.argv.indexOf("-table")+1]));!options.operation||options.operation===operation.importdb&&!options.query.sql||options.operation===operation.exportdb&&!options.query.tbl?print_usage():a&&(api=Api.initApiService(options),adminHandler=data.getHandler(),admin=adminHandler.admin,setUp(function(){a(options)}));return options}
parse_cmd(function(a){function b(){console.log("done")}a.operation===operation.connectdb?test_connect_database(a,b):a.operation===operation.importdb&&test_import_database(a,b);a.operation===operation.exportdb&&test_export_database(a,b)});
